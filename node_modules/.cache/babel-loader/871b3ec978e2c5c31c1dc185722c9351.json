{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nimport Head from \"next/head\";\nimport fetch from \"isomorphic-unfetch\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Api from \"../components/Api\";\nimport Layout from \"../components/Layout\";\nimport Search from \"../components/Search\";\nimport { changePage } from \"../components/actions/pageAction\";\nimport Loader from \"../components/Loader\";\n\nvar ApiPages = function ApiPages(props) {\n  if (props.page <= 0 || props.page > 10) props.changePage(1);\n\n  var _useState = useState(props.data),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var mounted = useRef(0);\n  useEffect(function () {\n    if (!props.isFetched || mounted.current) {\n      props.changePage(1);\n      ApiPages.getInitialProps({\n        page: 1,\n        search: props.search,\n        isUser: 1\n      }).then(function (json) {\n        setData(json.data);\n      });\n    }\n  }, [props.search]);\n  useEffect(function () {\n    if (!props.isFetched || mounted.current) {\n      ApiPages.getInitialProps({\n        page: props.page,\n        search: props.search,\n        isUser: 1\n      }).then(function (json) {\n        var temp = jsonConcat(data, json.data);\n        setData(temp);\n      });\n    } else {\n      mounted.current = 1;\n    }\n  }, [props.page]);\n\n  var fetchMoreData = function fetchMoreData() {\n    props.changePage(props.page + 1);\n  };\n\n  function jsonConcat(o1, o2) {\n    var t = [];\n\n    for (var key in o1) {\n      t[_parseInt(key)] = o1[key];\n    }\n\n    for (var key in o2) {\n      t[_parseInt(key) + _parseInt(data.length)] = o2[key];\n    }\n\n    return t;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Head, null, React.createElement(\"meta\", {\n    keywords: \"API\"\n  })), React.createElement(Layout, null, React.createElement(\"h2\", null, \"NEWS\"), React.createElement(\"br\", null), React.createElement(Search, null), React.createElement(\"br\", null), React.createElement(InfiniteScroll, {\n    dataLength: data.length,\n    next: fetchMoreData,\n    hasMore: data.length === 100 ? false : true,\n    loader: React.createElement(Loader, null),\n    endMessage: React.createElement(\"p\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, React.createElement(\"b\", null, \"Yay! You have seen it all\"))\n  }, React.createElement(Api, {\n    data: data\n  }))));\n};\n\nApiPages.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var _ref$search, search, _ref$page, page, _ref$isUser, isUser, url, res, json;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$search = _ref.search, search = _ref$search === void 0 ? \"tech\" : _ref$search, _ref$page = _ref.page, page = _ref$page === void 0 ? 1 : _ref$page, _ref$isUser = _ref.isUser, isUser = _ref$isUser === void 0 ? 0 : _ref$isUser;\n\n            if (!(isUser == 0 && !(typeof window === \"undefined\"))) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              data: [],\n              isFetched: false\n            });\n\n          case 3:\n            url = \"https://newsapi.org/v2/everything?\" + \"q=\" + search + \"&\" + \"sortBy=publishedAt&\" + \"page=\" + page + \"&\" + \"pageSize=10&language=en&\" + \"apiKey=3b214239993247f18926b8fab6ee014f\";\n            _context.next = 6;\n            return fetch(url);\n\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            json = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: json.articles,\n              isFetched: true\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    page: state.page.page,\n    search: state.page.search\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePage: changePage\n})(ApiPages);","map":null,"metadata":{},"sourceType":"module"}