{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { useEffect, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport Api from '../components/Api';\nimport Layout from '../components/Layout';\nimport Search from '../components/Search';\nimport Pagination from '../components/Pagination';\n\nvar ApiPages = function ApiPages(props) {\n  var _useState = useState(props.data),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var mounted = useRef();\n  useEffect(function () {\n    if (!mounted.current) mounted.current = true;else ApiPages.getInitialProps({\n      page: props.page,\n      search: props.search\n    }).then(function (json) {\n      return setData(json.data);\n    });\n  }, [props.page, props.search]);\n  return React.createElement(React.Fragment, null, React.createElement(Head, null, React.createElement(\"meta\", {\n    keywords: \"API\"\n  })), React.createElement(Layout, null, React.createElement(\"h2\", null, \"NEWS\"), React.createElement(\"br\", null), React.createElement(Search, null), React.createElement(\"br\", null), React.createElement(Pagination, null), React.createElement(Api, {\n    data: data\n  }), React.createElement(Pagination, null)));\n};\n\nApiPages.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var _ref$search, search, _ref$page, page, url, res, json;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$search = _ref.search, search = _ref$search === void 0 ? 'tech' : _ref$search, _ref$page = _ref.page, page = _ref$page === void 0 ? '1' : _ref$page;\n            url = 'https://newsapi.org/v2/everything?' + 'q=' + search + '&' + 'sortBy=publishedAt&' + 'page=' + page + '&' + 'pageSize=5&language=en&' + 'apiKey=3b214239993247f18926b8fab6ee014f';\n            _context.next = 4;\n            return fetch(url);\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: json\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    page: state.page.page,\n    search: state.page.search\n  };\n};\n\nexport default connect(mapStateToProps, null)(ApiPages);","map":null,"metadata":{},"sourceType":"module"}