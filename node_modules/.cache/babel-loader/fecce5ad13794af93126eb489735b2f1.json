{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Proptypes from 'prop-types';\nimport NewsItem from '../components/NewsItem';\nimport { fetchPosts } from '../components/actions/postActions';\n\nfunction Api(props) {\n  useEffect(function () {\n    props.fetchPosts({\n      page: props.page,\n      search: props.search\n    });\n  }, [props.page, props.search]);\n  console.log(props.page);\n  console.log(props.search);\n  var arr = [];\n  console.log(props.posts);\n\n  if (props.posts.status === 'ok') {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(props.posts.articles), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var i = _step.value;\n        arr.push(React.createElement(NewsItem, {\n          key: i.url,\n          props: i\n        }));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, arr);\n}\n\nApi.propTypes = {\n  fetchPosts: Proptypes.func.isRequired,\n  posts: Proptypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state.posts.items\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPosts: fetchPosts\n})(Api);","map":null,"metadata":{},"sourceType":"module"}